{"version":3,"sources":["context/CityContext.js","components/WeatherDisplay.js","components/Forecast.js","components/MoonPhase.js","components/MoonInfo.js","components/CityMap.js","hooks/useCityWeather.js","App.js","index.js"],"names":["CityContext","createContext","city","setCity","WeatherDisplay","_ref","data","React","createElement","className","location","name","current","condition","text","temp_c","href","concat","icon","target","rel","src","alt","Forecast","map","day","key","date","maxtemp_c","mintemp_c","MoonPhase","phase","imageSrc","process","New Moon","Waxing Crescent","First Quarter","Waxing Gibbous","Full Moon","Waning Gibbous","Last Quarter","Waning Crescent","style","width","marginTop","MoonInfo","shown","astro","onFetch","onClick","sunrise","sunset","moon_phase","CityMap","url","title","height","frameBorder","border","maxWidth","maxHeight","apiKey","baseUrl","App","useContext","currentWeather","forecast","mapUrl","moonShown","mapShown","fetchWeather","fetchMoon","fetchMap","setCurrentWeather","useState","setForecast","setAstro","setMoonShown","setMapShown","setMapUrl","async","alert","res","fetch","json","res2","forecastData","forecastday","Date","toISOString","split","astronomy","lat","lon","useCityWeather","id","type","value","onChange","e","placeholder","Fragment","RootWithContext","Provider","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.63fc8d12.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const CityContext = createContext({\n  city: '',\n  setCity: () => {},\n});","\n\nimport React from 'react';\n\nexport default function WeatherDisplay({ data }) {\n  return (\n    <div className=\"weather-column fade-in\">\n      <h2>Current Weather in {data.location.name}</h2>\n      <p>{data.current.condition.text}</p>\n      <p>Temperature: {data.current.temp_c}°C</p>\n      <a href={`https:${data.current.condition.icon}`} target=\"_blank\" rel=\"noopener noreferrer\">\n        <img src={`https:${data.current.condition.icon}`} alt=\"Weather Icon\" />\n      </a>\n    </div>\n  );\n}","\n\nimport React from 'react';\n\nexport default function Forecast({ data }) {\n  return (\n    <div className=\"weather-column fade-in\">\n      <h2>3-Day Forecast</h2>\n      {data.map(day => (\n        <div key={day.date}>\n          <h3>{day.date}</h3>\n          <p>{day.day.condition.text}</p>\n          <p>Max: {day.day.maxtemp_c}°C, Min: {day.day.mintemp_c}°C</p>\n          <a href={`https:${day.day.condition.icon}`} target=\"_blank\" rel=\"noopener noreferrer\">\n            <img src={`https:${day.day.condition.icon}`} alt=\"Forecast Icon\" />\n          </a>\n        </div>\n      ))}\n    </div>\n  );\n}","\n\n\nimport React from 'react';\n\nexport default function MoonPhase({ phase }) {\n  const BASE_URL = process.env.PUBLIC_URL + '/';\n  const phases = {\n    \"New Moon\": \"images/new_moon.png\",\n    \"Waxing Crescent\": \"images/waxing_crescent.png\",\n    \"First Quarter\": \"images/first_quarter.png\",\n    \"Waxing Gibbous\": \"images/waxing_gibbous.png\",\n    \"Full Moon\": \"images/full_moon.png\",\n    \"Waning Gibbous\": \"images/waning_gibbous.png\",\n    \"Last Quarter\": \"images/last_quarter.png\",\n    \"Waning Crescent\": \"images/waning_crescent.png\"\n  };\n  const imageSrc = BASE_URL + (phases[phase] || \"images/new_moon.png\");\n\n  return <img src={imageSrc} alt={phase} style={{ width: '100px', marginTop: '10px' }} />;\n}","\n\nimport React from 'react';\nimport MoonPhase from './MoonPhase';\n\nexport default function MoonInfo({ shown, astro, onFetch }) {\n  return (\n    <div className={`moon-container fade-in ${shown ? 'visible' : ''}`}>\n      {!shown && <button onClick={onFetch} className=\"button\">Get Moon Phase</button>}\n      {astro && (\n        <div>\n          <h2>Astronomy Info</h2>\n          <p>Sunrise: {astro.sunrise}</p>\n          <p>Sunset: {astro.sunset}</p>\n          <p>Moon Phase: {astro.moon_phase}</p>\n          <MoonPhase phase={astro.moon_phase} />\n        </div>\n      )}\n    </div>\n  );\n}","\n\nimport React from 'react';\n\nexport default function CityMap({ shown, url, onFetch }) {\n  return (\n    <div className={`map-container fade-in ${shown ? 'visible' : ''}`}>\n      {!shown && <button onClick={onFetch} className=\"button\">Get City Map</button>}\n      {url && (\n        <div>\n          <h2>City Map</h2>\n          <iframe\n            title=\"City Map\"\n            width=\"100%\"\n            height=\"400px\"\n            src={url}\n            frameBorder=\"0\"\n            style={{ border: 0, maxWidth: '100%', maxHeight: '400px' }}\n          ></iframe>\n        </div>\n      )}\n    </div>\n  );\n}","import { useState, useContext } from 'react';\nimport { CityContext } from '../context/CityContext';\n\nconst apiKey = process.env.REACT_APP_WEATHER_API_KEY;\nconst baseUrl = 'https://api.weatherapi.com/v1';\n\nexport default function useCityWeather() {\n  const { city } = useContext(CityContext);\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState([]);\n  const [astro, setAstro] = useState(null);\n  const [moonShown, setMoonShown] = useState(false);\n  const [mapShown, setMapShown] = useState(false);\n  const [mapUrl, setMapUrl] = useState('');\n\n  const fetchWeather = async () => {\n    if (!city) return alert('Please enter a city.');\n\n    const res = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${city}`);\n    const data = await res.json();\n\n    if (!data.location || !data.current) {\n      alert('City not found. Please check the name and try again.');\n      return;\n    }\n\n    setCurrentWeather(data);\n\n    const res2 = await fetch(`${baseUrl}/forecast.json?key=${apiKey}&q=${city}&days=3`);\n    const forecastData = await res2.json();\n\n    if (!forecastData.forecast) {\n      alert('Forecast data not available.');\n      return;\n    }\n\n    setForecast(forecastData.forecast.forecastday);\n\n    setAstro(null);\n    setMoonShown(false);\n    setMapShown(false);\n    setMapUrl('');\n  };\n\n  const fetchMoon = async () => {\n    const date = new Date().toISOString().split('T')[0];\n    const res = await fetch(`${baseUrl}/astronomy.json?key=${apiKey}&q=${city}&dt=${date}`);\n    const data = await res.json();\n    setAstro(data.astronomy.astro);\n    setMoonShown(true);\n  };\n\n  const fetchMap = async () => {\n    const res = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${city}`);\n    const data = await res.json();\n    const { lat, lon } = data.location;\n    const url = `https://www.openstreetmap.org/export/embed.html?bbox=${lon-0.1},${lat-0.1},${lon+0.1},${lat+0.1}&layer=mapnik&marker=${lon},${lat}`;\n    setMapUrl(url);\n    setMapShown(true);\n  };\n\n  return {\n    currentWeather,\n    forecast,\n    astro,\n    moonShown,\n    mapShown,\n    mapUrl,\n    fetchWeather,\n    fetchMoon,\n    fetchMap\n  };\n}","import React, { useContext } from 'react';\nimport { CityContext } from './context/CityContext';\nimport WeatherDisplay from './components/WeatherDisplay';\nimport Forecast from './components/Forecast';\nimport MoonInfo from './components/MoonInfo';\nimport CityMap from './components/CityMap';\nimport useCityWeather from './hooks/useCityWeather';\n\nexport default function App() {\n  const { city, setCity } = useContext(CityContext);\n  const {\n    currentWeather,\n    forecast,\n    astro,\n    mapUrl,\n    moonShown,\n    mapShown,\n    fetchWeather,\n    fetchMoon,\n    fetchMap,\n  } = useCityWeather();\n\n  return (\n    <div id=\"app\">\n      <h1 className=\"weather-title\">Weather App</h1>\n      <input\n        type=\"text\"\n        value={city}\n        onChange={e => setCity(e.target.value)}\n        className=\"weather-input\"\n        placeholder=\"Enter city\"\n      />\n      <button onClick={fetchWeather} className=\"button\">Get Weather</button>\n\n      {currentWeather && (\n        <>\n          <div className=\"weather-column\">\n            <WeatherDisplay data={currentWeather} />\n            <Forecast data={forecast} />\n          </div>\n          <div className=\"weather-column\">\n            <MoonInfo shown={moonShown} astro={astro} onFetch={fetchMoon} />\n            <CityMap shown={mapShown} url={mapUrl} onFetch={fetchMap} />\n          </div>\n        </>\n      )}\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { CityContext } from './context/CityContext';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nconst RootWithContext = () => {\n  const [city, setCity] = useState('');\n\n  return (\n    <CityContext.Provider value={{ city, setCity }}>\n      <App />\n    </CityContext.Provider>\n  );\n};\n\nroot.render(\n  <React.StrictMode>\n    <RootWithContext />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}